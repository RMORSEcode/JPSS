xmx=which(dates.8d$DOY2[ylim]>=wod.chl.df2$DOY[i])#[dates.8d$Y1==yj]
both=ylim[which(xmn%in%xmx)]
if(length(both)<1){
next
}
else {
wod.chl.df2$smatch[i]=both
wod.chl.df2$sDOY1[i]=dates.8d$DOY1[both]
wod.chl.df2$sDOY2[i]=dates.8d$DOY2[both]
}
}
wod.chl.df2$DOYmed=round((wod.chl.df2$sDOY1+wod.chl.df2$sDOY2)/2, digits=0)
wod.chl.df2$ddif=wod.chl.df2$DOY-wod.chl.df2$DOYmed
length(wod.chl.df2$schl)
wod.chl.df2$schl=NA
test=wod.chl.df2
coordinates(wod.chl.df2)=~lon+lat #transform to Spatialpointsdataframe
i=1
wod.chl.df2$schl[i]=extract(chl.gsm.8d[[140]], wod.chl.df2[i,], method='bilinear', fun='mean', na.rm=T)
for(i in 1:length(wod.chl.df2$schl)){
wod.chl.df2$schl[i]=extract(chl.gsm.8d[[140]], wod.chl.df2[i,], method='bilinear', fun='mean', na.rm=T)
}
i
wod.chl.df2$smatch[i]
paste(i, ' of ', length(wod.chl.df2$schl), sep='')
1000%%10
1000%%100
1000%%3
i
i%%10==0)
i%%10==0
wod.chl.df2$schl=NA
coordinates(wod.chl.df2)=~lon+lat #transform to Spatialpointsdataframe
wod.chl.df2=test
i=1
wod.chl.df2$gsm=NA
wod.chl.df2$oc5=NA
wod.chl.df2$av=NA
coordinates(wod.chl.df2)=~lon+lat #transform to Spatialpointsdataframe
wod.chl.df2$gsm[i]=extract(chl.gsm.8d[[wod.chl.df2$smatch[i]]], wod.chl.df2[i,], method='bilinear', fun='mean', na.rm=T)
wod.chl.df2$av[i]=extract(chl.av.8d[[wod.chl.df2$smatch[i]]], wod.chl.df2[i,], method='bilinear', fun='mean', na.rm=T)
wod.chl.df2$oc5[i]=extract(chl.oc5.8d[[wod.chl.df2$smatch[i]]], wod.chl.df2[i,], method='bilinear', fun='mean', na.rm=T)
if (i%%100==0){
print(paste(i, ' of ', length(wod.chl.df2$schl), sep=''))
}
wod.chl.df2$gsm=NA
wod.chl.df2$oc5=NA
wod.chl.df2$av=NA
for(i in 1:length(wod.chl.df2$schl)){
wod.chl.df2$gsm[i]=extract(chl.gsm.8d[[wod.chl.df2$smatch[i]]], wod.chl.df2[i,], method='bilinear', fun='mean', na.rm=T)
wod.chl.df2$av[i]=extract(chl.av.8d[[wod.chl.df2$smatch[i]]], wod.chl.df2[i,], method='bilinear', fun='mean', na.rm=T)
wod.chl.df2$oc5[i]=extract(chl.oc5.8d[[wod.chl.df2$smatch[i]]], wod.chl.df2[i,], method='bilinear', fun='mean', na.rm=T)
if (i%%100==0){
print(paste(i, ' of ', length(wod.chl.df2$schl), sep=''))
}
}
save.image("~/GitHub/JPSS/ws_20190805.RData")
within(wod.chl.df2, rm(schl))
test$gsm=wod.chl.df2$gsm
test$av=wod.chl.df2$av
test$oc5=wod.chl.df2$oc5
View(test)
plot(test$chl~test$gsm, type='p')
plot(test$chl~test$av, type='p')
plot(test$chl~test$oc5, type='p')
plot(log(test$chl)~log(test$oc5), type='p')
plot(log10(test$chl)~log10(test$oc5), type='p')
plot(log10(test$chl)~log10(test$gsm), type='p')
save.image("~/GitHub/JPSS/ws_20190805.RData")
load("C:/Users/ryan.morse/Downloads/hauls_catch_Dec2017.RData")
table(hauls$ocean
)
table(hauls$survey)
load("C:/Users/ryan.morse/Documents/GitHub/JPSS/ws_20190809.RData")
library(raster)
library(mgcv)
# library(sp)
library(maptools)
library(marmap)
library(maps)
library(mapdata)
library(rgeos)
library(ncdf4)
library(abind)
library(RColorBrewer)
library(chron)
barplot(table(round(wod.chl.df2$chl, digits=1)))
barplot(table(wod.chl.df2$month))
barplot(table(wod.chl.df2$year))
# coordinates(wod.chl.df2)=~lon+lat #transform to Spatialpointsdataframe
# proj4string(wod.chl.df2)=CRS("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0") #ensure same projection
# pointsin=over(wod.chl.df2, NES.shp) #find which boxes samples belong to
map("worldHires", xlim=c(-77,-65),ylim=c(35,45), fill=T,border=0,col="gray70")
map.axes(las=1)
points(wod.chl.df2)
library(plotrix)
#subset to low or high chl
test=wod.chl.df2[which(wod.chl.df2$chl<5),]
taylor.diagram(test$chl, test$oc5, col='red')
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
wod.chl.df2$occi=NA
for(i in 1:length(wod.chl.df2$chl)){
# wod.chl.df2$gsm[i]=extract(chl.gsm.8d[[wod.chl.df2$smatch[i]]], wod.chl.df2[i,], method='bilinear', fun='mean', na.rm=T)
# wod.chl.df2$av[i]=extract(chl.av.8d[[wod.chl.df2$smatch[i]]], wod.chl.df2[i,], method='bilinear', fun='mean', na.rm=T)
# wod.chl.df2$oc5[i]=extract(chl.oc5.8d[[wod.chl.df2$smatch[i]]], wod.chl.df2[i,], method='bilinear', fun='mean', na.rm=T)
wod.chl.df2$occi[i]=extract(occi[[wod.chl.df2$smatch[i]]], wod.chl.df2[i,], method='bilinear', fun='mean', na.rm=T)
if (i%%100==0){
print(paste(i, ' of ', length(wod.chl.df2$chl), sep=''))
}
}
#subset to low or high chl
test=wod.chl.df2[which(wod.chl.df2$chl<5),]
taylor.diagram(test$chl, test$occi, add=T, col='black')
#subset to low or high chl
test=wod.chl.df2[which(wod.chl.df2$chl<2),]
taylor.diagram(test$chl, test$oc5, col='red')
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
#subset to low or high chl
test=wod.chl.df2[which(wod.chl.df2$chl>2),]
taylor.diagram(test$chl, test$oc5, col='red')
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
#subset to low or high chl
test=wod.chl.df2[which(wod.chl.df2$chl>5),]
taylor.diagram(test$chl, test$oc5, col='red')
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
#subset to low or high chl
test=wod.chl.df2[which(wod.chl.df2$chl>1),]
taylor.diagram(test$chl, test$oc5, col='red')
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
#subset to low or high chl
test=wod.chl.df2[which(wod.chl.df2$chl<1),]
taylor.diagram(test$chl, test$oc5, col='red')
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
install.packages("TMB")
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
install_github("james-thorson/VAST", INSTALL_opts="--no-staged-install")
devtools::install_github("james-thorson/VAST", INSTALL_opts="--no-staged-install")
install.packages('colorspace')
install.packages('colorspace')
save.image("~/GitHub/JPSS/ws_20190809.RData")
devtools::install_github("james-thorson/VAST", INSTALL_opts="--no-staged-install")
devtools::install_github("james-thorson/VAST", INSTALL_opts="--no-staged-install")
devtools::install_github("james-thorson/VAST", INSTALL_opts="--no-staged-install")
install.packages('processx')
devtools::install_github("james-thorson/VAST", INSTALL_opts="--no-staged-install")
install.packages('backports')
devtools::install_github("james-thorson/VAST", INSTALL_opts="--no-staged-install")
install.packages('curl')
install.packages("curl")
devtools::install_github("james-thorson/VAST", INSTALL_opts="--no-staged-install")
devtools::install_github("james-thorson/VAST")
usethis::browse_github_pat("james-thorson/VAST")
GITHUB_PAT=63fd704319b0bb8cabdeaea0734828bba56cb7ee
GITHUB_PAT='63fd704319b0bb8cabdeaea0734828bba56cb7ee'
usethis::edit_r_environ()
devtools::install_github("james-thorson/VAST")
installed.packages('processx')
install.packages('processx')
devtools::install_github("james-thorson/VAST")
install.packages('processx')
install.packages("processx")
devtools::install_github("james-thorson/VAST", dependencies = F)
install.packages('matrix')
install.packages('Matrix')
devtools::install_github("james-thorson/VAST", dependencies = F)
library("installr")
if(!require("installr")) install.packages('installr')
install.packages('installr')
library("installr")
updateR()
about
R
help(R)
help
?R
??R
?version
R.Version()
install.packages('oce')
load("G:/1_habitat_analysis_2017/botsal/spring_spdf/rasters/RAST_NESREG_2012.04.03.BS.TEMP.YEAR.000066596.RData")
library(raster)
plot(masked.raster)
BS=masked.raster
load("G:/1_habitat_analysis_2017/bottemp/spring_spdf/rasters/RAST_NESREG_2012.04.03.BT.TEMP.YEAR.000066596.RData")
BT=masked.raster
plot(BT)
library(oce)
test=swSigma0(BS, BT)
load("G:/1_habitat_analysis_2017/static_vars/rast_gdepth.rdata")
z=masked.raster
plot(z)
z[z>0]=NA
plot(z)
p=swPressure(z, latitude = 42)
z[z==0]=NA
p=swPressure(z, latitude = 42)
z=masked.raster
p=swPressure(z, latitude = 42)
z[z>=0]=0.001
plot(z)
z2=z
z2[z2>=0]=NA
p=swPressure(z, latitude = 42, na.rm=T)
p=swPressure(z, latitude = 42, na.ignore=T)
p=swPressure(z, latitude = 42)
p=swPressure(z2, latitude = 42)
p=swPressure(z2, latitude = 42, na.rm=T)
p=calc(z2, fun=swPressure(x), na.rm=T)
p=calc(z2, fun=function(x){swPressure(x)}, na.rm=T)
p=calc(z2, fun=function(x){oce::swPressure(x)}, na.rm=T)
p=calc(z2, fun=function(x){swPressure(x), na.rm=T)}
p=calc(z2, fun=function(x){swPressure(x, latitude = =42), na.rm=T)}
p=calc(z2, fun=function(x){swPressure(x, latitude =42), na.rm=T)}
fun=function(x){swPressure(x, latitude =42)
}
p=calc(z2, fun, na.rm=T)
p=calc(z, fun, na.rm=T)
p=swPressure(z, latitude = 42)
P=raster)p
P=raster(p)
P=as.raster(p)
max(p)
min(p)
min(z)
testz=as.vector(z)
mz=as.matrix(z)
mp=as.matrix(p, nrow=721, ncol=961)
rp=raster(mp)
plot(rp)
min(rp)
mp=matrix(p, nrow=721, ncol=961)
rp=raster(mp)
min(rp)
plot(rp)
mp=matrix(p, nrow=721, ncol=961, byrow=T)
rp=raster(mp)
plot(rp)
crs(z)
tt=crs(z)
crs(rp)=tt
extent(z)
tt=extent(z)
tt
extent(rp)=tt
plot(rp)
s=as.vector(BS)
t=as.vector(BT)
rho=swRho(s, t, p)
maskp=mask(rp, BS)
extent(BS)
extent(z)
crs(BS)
min(BS)
plot(BS)
load("C:/Users/ryan.morse/Desktop/1_habitat_analysis_2017/sst/NESREG/GRID_SHP_nes half deg all ecoregionsPoly.RData")
tt
crs(rp)
tt=crs(rp)
crs(BS)=tt
rp2=resample(rp, BS)
plot(rp2)
mskrp2=mask(rp2, BS)
plot(mskrp2)
p2=as.vector(mskrp2)
rho=swRho(s, t, p2)
min(mskrp2)
rhomat=matrix(rho, nrow=90, ncol=105, byrow=T)
Rho=raster(rhomat)
plot(Rho)
plot(BS)
plot(BT)
load("C:/Users/ryan.morse/Desktop/1_habitat_analysis_2017/botsal/fall_spdf/rasters/RAST_NESREG_2012.10.11.BS.TEMP.YEAR.000066596.RData")
BS=masked.raster
s=as.vector(BS)
load("C:/Users/ryan.morse/Desktop/1_habitat_analysis_2017/bottemp/fall_spdf/rasters/RAST_NESREG_2012.10.11.BT.TEMP.YEAR.000066596.RData")
BT=masked.raster
t=as.vector(BT)
### comoute density using salinity, temp, and pressure
rho=swRho(s, t, p2)
rhomat=matrix(rho, nrow=90, ncol=105, byrow=T)
Rho=raster(rhomat)
plot(Rho)
save.image("C:/Users/ryan.morse/Desktop/1_habitat_analysis_2017/ws_20190829.RData")
load("C:/Users/ryan.morse/Documents/GitHub/JPSS/ws_20190809.RData")
#subset to low or high chl
test=wod.chl.df2[which(wod.chl.df2$chl<1),]
library(plotrix)
#subset to low or high chl
test=wod.chl.df2[which(wod.chl.df2$chl<1),]
taylor.diagram(test$chl, test$oc5, col='red')
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
?taylor.diagram
#subset to low or high chl
limitc=1
taylor.diagram(test$chl, test$oc5, col='red', main=paste('Chl < ', limitc, sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
#subset to low or high chl
limitc=5
test=wod.chl.df2[which(wod.chl.df2$chl<limitc),]
taylor.diagram(test$chl, test$oc5, col='red', main=paste('Chl < ', limitc, sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
taylor.diagram(wod.chl.df2$chl, wod.chl.df2$oc5, col='red', main='WOD in situ chl vs 8-d combined')
taylor.diagram(wod.chl.df2$chl, wod.chl.df2$gsm, add=T, col='blue')
taylor.diagram(wod.chl.df2$chl, wod.chl.df2$av, add=T, col='green')
taylor.diagram(wod.chl.df2$chl, wod.chl.df2$occi, add=T, col='black')
#subset to low or high chl
limitc=10
test=wod.chl.df2[which(wod.chl.df2$chl<limitc),]
taylor.diagram(test$chl, test$oc5, col='red', main=paste('Chl < ', limitc, sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
#subset to low or high chl
limitc=0.1
test=wod.chl.df2[which(wod.chl.df2$chl<limitc),]
taylor.diagram(test$chl, test$oc5, col='red', main=paste('Chl < ', limitc, sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
library(raster)
library(mgcv)
# library(sp)
library(maptools)
library(marmap)
library(maps)
library(mapdata)
library(rgeos)
library(ncdf4)
library(abind)
library(RColorBrewer)
library(chron)
?in.out
wod.chl.df2@coords[1]
wod.chl.df2@coords[2]
wod.chl.df2@coords[1][1]
m4=as.matrix(wod.chl.df2@coords #lon,lat from ZPD (stage data)
m4=as.matrix(wod.chl.df2@coors)
m4=as.matrix(wod.chl.df2@coords)
View(m4)
# ZPDgbk=in.shape(gbk.mat, m4)
wod.chl.df2$epu=NA
wod.chl.df2$epu[which(in.out(gbk.mat, m4))]='GBK'
wod.chl.df2$epu[which(in.out(gom.mat, m4))]='GOM'
#combine shapefiles GOM and GBK
# gom.gbk.shp=gUnion(gom, gbk, byid=F, id=NULL)
# gom.gbk.shp=gUnion(gom, gbk, byid=F, id=NULL)
# gom.scs.shp=gUnion(gom, scs, byid=F, id=NULL)
# mab.gbk.shp=gUnion(mab, gbk, byid=F, id=NULL)
# NES.shp=gUnion(mab.gbk.shp, gom.scs.shp, byid=F, id=NULL)
#extract just lat/lons for lines
gbk.lonlat =as.data.frame(lapply(slot(gbk, "polygons"), function(x) lapply(slot(x, "Polygons"), function(y) slot(y, "coords"))))
gom.lonlat =as.data.frame(lapply(slot(gom, "polygons"), function(x) lapply(slot(x, "Polygons"), function(y) slot(y, "coords"))))
mab.lonlat =as.data.frame(lapply(slot(mab, "polygons"), function(x) lapply(slot(x, "Polygons"), function(y) slot(y, "coords"))))
scs.lonlat =as.data.frame(lapply(slot(scs, "polygons"), function(x) lapply(slot(x, "Polygons"), function(y) slot(y, "coords"))))
# gom.gbk.lonlat =as.data.frame(lapply(slot(gom.gbk.shp, "polygons"), function(x) lapply(slot(x, "Polygons"), function(y) slot(y, "coords"))))
# NES.lonlat=as.data.frame(lapply(slot(NES.shp, "polygons"), function(x) lapply(slot(x, "Polygons"), function(y) slot(y, "coords"))))
# create matrix to use in in.out function
gom.mat=as.matrix(gom.lonlat)
gbk.mat=as.matrix(gbk.lonlat)
mab.mat=as.matrix(mab.lonlat)
scs.mat=as.matrix(scs.lonlat)
wod.chl.df2$epu[which(in.out(gbk.mat, m4))]='GBK'
wod.chl.df2$epu[which(in.out(gom.mat, m4))]='GOM'
wod.chl.df2$epu[which(in.out(scs.mat, m4))]='SCS'
wod.chl.df2$epu[which(in.out(mab.mat, m4))]='MAB'
#subset to region
limitc='GBK'
test=wod.chl.df2[which(wod.chl.df2$epu==limitc),]
taylor.diagram(test$chl, test$oc5, col='red', main=paste(limitc, ' only', sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
#subset to region
limitc='GOM'
test=wod.chl.df2[which(wod.chl.df2$epu==limitc),]
taylor.diagram(test$chl, test$oc5, col='red', main=paste(limitc, ' only', sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
#subset to region
limitc='MAB'
test=wod.chl.df2[which(wod.chl.df2$epu==limitc),]
taylor.diagram(test$chl, test$oc5, col='red', main=paste(limitc, ' only', sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
#subset to region
limitc='SCS'
test=wod.chl.df2[which(wod.chl.df2$epu==limitc),]
taylor.diagram(test$chl, test$oc5, col='red', main=paste(limitc, ' only', sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
View(test)
taylor.diagram(test$chl, test$oc5, col='red', main=paste(limitc, ' only',' n=',length(test), sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
#subset to region
limitc='GOM'
test=wod.chl.df2[which(wod.chl.df2$epu==limitc),]
taylor.diagram(test$chl, test$oc5, col='red', main=paste(limitc, ' only;',' n=',length(test), sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
#subset to region
limitc='GBK'
test=wod.chl.df2[which(wod.chl.df2$epu==limitc),]
taylor.diagram(test$chl, test$oc5, col='red', main=paste(limitc, ' only;',' n=',length(test), sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
#subset to region
limitc='MAB'
test=wod.chl.df2[which(wod.chl.df2$epu==limitc),]
taylor.diagram(test$chl, test$oc5, col='red', main=paste(limitc, ' only;',' n=',length(test), sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
#subset to region
limitc='NA'
test=wod.chl.df2[which(wod.chl.df2$epu==limitc),]
taylor.diagram(test$chl, test$oc5, col='red', main=paste(limitc, ' only;',' n=',length(test), sep=''))
### read in calibration files from seaBASS
setwd('C:/Users/ryan.morse/Documents/GitHub/JPSS/calibration')
#subset to low or high chl
limitc=10
test=wod.chl.df2[which(wod.chl.df2$chl<limitc),]
taylor.diagram(test$chl, test$oc5, col='red', main=paste(limitc, ' only;',' n=',length(test), sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
taylor.diagram(test$chl, test$oc5, col='red', main=paste('chl < ', limitc, ' only;',' n=',length(test), sep=''))
taylor.diagram(test$chl, test$oc5, col='red', main=paste('Chl < ', limitc, ' only;',' n=',length(test), sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
taylor.diagram(test$chl, test$oc5, col='red', main=paste('Chl < ', limitc, ';',' n=',length(test), sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
#subset to low or high chl
limitc=5
test=wod.chl.df2[which(wod.chl.df2$chl<limitc),]
taylor.diagram(test$chl, test$oc5, col='red', main=paste('Chl < ', limitc, ';',' n=',length(test), sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
#subset to low or high chl
limitc=1
test=wod.chl.df2[which(wod.chl.df2$chl<limitc),]
taylor.diagram(test$chl, test$oc5, col='red', main=paste('Chl < ', limitc, ';',' n=',length(test), sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
getwd()
test=wod.chl.df2[is.na(wod.chl.df2$epu),]
limitc='NA' #GBK SCS MAB
taylor.diagram(test$chl, test$oc5, col='red', main=paste(limitc, ' only;',' n=',length(test), sep=''))
taylor.diagram(test$chl, test$gsm, add=T, col='blue')
taylor.diagram(test$chl, test$av, add=T, col='green')
taylor.diagram(test$chl, test$occi, add=T, col='black')
map("worldHires", xlim=c(-77,-65),ylim=c(35,45), fill=T,border=0,col="gray70")
map.axes(las=1)
data(stateMapEnv)
points(test@coords, pch=19)
#subset to region
limitc='GOM' #GBK SCS MAB
test=wod.chl.df2[which(wod.chl.df2$epu==limitc),]
barplot(test$month)
barplot(table(test$month))
barplot(table(test$month), main=limitc)
#subset to region
limitc='GBK' #GBK SCS MAB
test=wod.chl.df2[which(wod.chl.df2$epu==limitc),]
barplot(table(test$month), main=limitc)
#subset to region
limitc='MAB' #GBK SCS MAB
test=wod.chl.df2[which(wod.chl.df2$epu==limitc),]
barplot(table(test$month), main=limitc)
#subset to region
limitc='SCS' #GBK SCS MAB
test=wod.chl.df2[which(wod.chl.df2$epu==limitc),]
barplot(table(test$month), main=limitc)
lines(NES.shp)
#subset to region
limitc='GOM' #GBK SCS MAB
test=wod.chl.df2[which(wod.chl.df2$epu==limitc),]
barplot(table(test$year), main=limitc)
map("worldHires", xlim=c(-77,-65),ylim=c(35,45), fill=T,border=0,col="gray70")
map.axes(las=1)
data(stateMapEnv)
points(test@coords, pch=19)
load("C:/Users/ryan.morse/Desktop/1_habitat_analysis_2017/fall models/fall.data.RData")
